xlab("Age at scan (log(years))") +
ylab(paste0(p, " Centile")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 18))
print(plotSs_sex)
# Plot the original data and the set of centile curves on a figure
plotSs <- ggplot() +
#geom_point(aes(x=dfSsterm$logAge, dfSsterm[, p]), alpha=0.5) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[1]]$median), alpha=0.4) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[2]]$median), alpha=0.6) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[3]]$median), alpha=0.8) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[4]]$median)) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[5]]$median), alpha=0.8) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[6]]$median), alpha=0.6) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[7]]$median), alpha=0.4) +
scale_x_continuous(breaks=tickMarks, labels=tickLabels,
limits=c(tickMarks[[1]], max(centileCurvesSs[[1]]$logAge))) +
labs(title=paste0("Sample Growth Chart for ", p)) +
xlab("Age at scan (log(years))") +
ylab(paste0(p, " Centile")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 18))
print(plotSs)
# Plot the original data and the set of centile curves on a figure
plotSs_sex <- ggplot() +
#geom_point(aes(x=dfSsterm$logAge, dfSsterm[, p]), alpha=0.5) +
##male curves
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[1]]$male), alpha=0.4, color = "blue") +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[2]]$male), alpha=0.6, color = "blue") +
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[3]]$male), alpha=0.8, color = "blue") +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[4]]$male), color = "blue") +
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[5]]$male), alpha=0.8, color = "blue") +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[6]]$male), alpha=0.6, color = "blue") +
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[7]]$male), alpha=0.4, color = "blue") +
##female curves
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[1]]$female), alpha=0.4, color = "red") +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[2]]$female), alpha=0.6, color = "red") +
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[3]]$female), alpha=0.8, color = "red") +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[4]]$female), color = "red") +
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[5]]$female), alpha=0.8, color = "red") +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[6]]$female), alpha=0.6, color = "red") +
#geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[7]]$female), alpha=0.4, color = "red") +
scale_x_continuous(breaks=tickMarks, labels=tickLabels,
limits=c(tickMarks[[1]], max(centileCurvesSs[[1]]$logAge))) +
labs(title=paste0("Sample Growth Chart for ", p, "By Sex")) +
xlab("Age at scan (log(years))") +
ylab(paste0(p, " Centile")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 18))
print(plotSs_sex)
dfSsNonterm <- df_Ss %>% filter(preterm != "Term") %>% select(c("sex", "logAge", "TCV")) #293
#Sort the df
dfSsNonterm <- dfSsNonterm[order(dfSsNonterm$logAge),]
# No SurfaceHoles in the SynthSeg (SS) model
#The df should have no NAs. So create df for the specific variables needed. Or remove all the variables with NAs.
formulaSs <- as.formula(paste0(p, "~fp(logAge, npoly=3) + sex - 1"))
growthChartModelSs <-gamlss(formula = formulaSs,
sigma.formula = formulaSs,
nu.formula = as.formula(paste0(p, "~1")),
family = GG,
data = dfSsNonterm,
control = gamlss.control(n.cyc = 200),  # See (2)
trace = F)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange(growthChartModelSs, dfSsNonterm$logAge)
# Calculate the age at peak (median) phenotype value
ageAtPeakSs <- 10^(sort(dfSsNonterm$logAge)[which.max(medianCentileSs)])
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange(growthChartModelSs, dfSsNonterm$logAge)
View(medianCentileSs)
# Predict a set of centiles for each model
centileCurvesSs <- c()
desiredCentiles <- c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95)
for (i in c(1:length(desiredCentiles))){
centileCurvesSs[[i]] <- predictCentilesForAgeRange(growthChartModelSs, dfSsNonterm$logAge,
cent=desiredCentiles[[i]])}
# Plot the original data and the set of centile curves on a figure
plotSs <- ggplot() +
#geom_point(aes(x=dfSsNonterm$logAge, dfSsNonterm[, p]), alpha=0.5) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[1]]$median), alpha=0.4) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[2]]$median), alpha=0.6) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[3]]$median), alpha=0.8) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[4]]$median)) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[5]]$median), alpha=0.8) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[6]]$median), alpha=0.6) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[7]]$median), alpha=0.4) +
scale_x_continuous(breaks=tickMarks, labels=tickLabels,
limits=c(tickMarks[[1]], max(centileCurvesSs[[1]]$logAge))) +
labs(title=paste0("Sample Growth Chart for ", p)) +
xlab("Age at scan (log(years))") +
ylab(paste0(p, " Centile")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 18))
print(plotSs)
# Plot the original data and the set of centile curves on a figure
plotSs <- ggplot() +
#geom_point(aes(x=dfSsNonterm$logAge, dfSsNonterm[, p]), alpha=0.5) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[1]]$median), alpha=0.4) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[2]]$median), alpha=0.6) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[3]]$median), alpha=0.8) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[4]]$median)) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[5]]$median), alpha=0.8) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[6]]$median), alpha=0.6) +
geom_line(aes(x=centileCurvesSs[[1]]$logAge, y=centileCurvesSs[[7]]$median), alpha=0.4) +
scale_x_continuous(breaks=tickMarks, labels=tickLabels,
limits=c(tickMarks[[1]], max(centileCurvesSs[[1]]$logAge))) +
xlab("Age at scan (log(years))") +
ylab(paste0(p, " Centile")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 18))
print(plotSs)
growthChartModelSs <-gamlss(formula = formulaSs,
sigma.formula = formulaSs,
nu.formula = as.formula(paste0(p, "~1")),
family = GG,
data = dfSsNonterm,
control = gamlss.control(n.cyc = 500),  # See (2)
trace = F)
participants <- load_data(names = c(paste0("data",1:3)), paste0(folders,"participants.tsv")) %>% bind_rows(.)
qc_scores <- load_data(names = c(paste0("data",1:3)), paste0(folders,"synthseg+_qc_scores.csv")) %>% bind_rows(.)
volumes <- load_data(names = c(paste0("data",1:3)), paste0(folders,"synthseg+_volumes.csv")) %>% bind_rows(.)
colnames(qc_scores) <- c(paste0(names(qc_scores[1:8])),paste0(names(qc_scores[9:length(names(qc_scores))]),"_qc"))
qc_manual <- load_data(names = "qc", manual_qc_file) %>% bind_rows(.)
#merge
full_data <- merge(qc_scores, volumes, by = intersect(names(qc_scores), names(volumes)))
full_data <- merge(full_data, participants, by = intersect(names(full_data), names(participants)))
write.csv(full_data, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_combined_011923.csv", quote = F, row.names = F)
write.csv(df_Ss, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv", quote = F, row.names = F)
write.csv(df_mnSs, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_mnSsQC.csv", quote = F, row.names = F)
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv")
names(lbccc)
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
names(lbcc)
intersect(names(lbcc), names(slip_GASsQc))
growthChartModelSs <-gamlss(formula = formulaSs,
sigma.formula = formulaSs,
nu.formula = as.formula(paste0(p, "~1")),
family = GG,
data = dfSsNonterm,
control = gamlss.control(n.cyc = 500),  # See (2)
trace = F)
names(lbcc)
names(slip_GASsQc)
View(lbcc)
View(lbcc)
View(slip_GASsQc)
lbcc$PCW_at_birth
unique(lbcc$PCW_at_birth)
unique(lbcc$PCW_at_birth_recoded)
unique(lbcc$GAbins
)
names(slip_GASsQc) %in% "csf"
names(slip_GASsQc)[names(slip_GASsQc) %in% "csf"]
head(lbcc$newname)
head(lbcc$brainMaskVol)
head(slip_GASsQc$TCV)
lbcc <- lbcc %>% rename(hippocampi_and_amygdala = hippocampi_and_amygdale)
names(lbcc)
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
lbcc <- lbcc %>% rename(hippocampi_and_amygdala = hippocampi_and_amygdale)
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = GMV + sGMV, total_GMWM = GMV + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdala = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = GMV, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm)
names(slip_GASsQc)
head(slip_GASsQc$Cortex)
head(slip_GASsQc$WMV)
head(slip_GASsQc$TCV)
head(slip_GASsQc$Cortex) + head(slip_GASsQc$WMV)
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
lbcc <- lbcc %>% rename(hippocampi_and_amygdala = hippocampi_and_amygdale)
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = Cortex + sGMV, total_GMWM = Cortex + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdala = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = Cortex, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm)
intersect(names(lbcc), names(slip_GASsQc))
names(lbcc)
setdiff(names(lbcc), names(slip_GASsQc))
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
#fi
lbcc <- lbcc %>% rename(hippocampi_and_amygdalae = hippocampi_and_amygdale)
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = Cortex + sGMV, total_GMWM = Cortex + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdalae = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = Cortex, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm)
head(lbcc$PCW_at_scan)
#fi
lbcc <- lbcc %>% rename(hippocampi_and_amygdalae = hippocampi_and_amygdale) %>% mutate(PC_days_at_scan = PCW_at_scan*7)
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
#fi
lbcc <- lbcc %>% rename(hippocampi_and_amygdalae = hippocampi_and_amygdale) %>% mutate(PC_days_at_scan = PCW_at_scan*7)
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = Cortex + sGMV, total_GMWM = Cortex + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdalae = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = Cortex, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm)
lbcc_slip <- rbind(lbcc, slip_GASsQc)
lbcc_slip <- bind_rows(lbcc, slip_GASsQc)
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
#fi
lbcc <- lbcc %>% rename(hippocampi_and_amygdalae = hippocampi_and_amygdale) %>% mutate(PC_days_at_scan = PCW_at_scan*7, PCW_at_birth_recoded = as.integer(PCW_at_birth_recoded))
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = Cortex + sGMV, total_GMWM = Cortex + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdalae = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = Cortex, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm)
lbcc_slip <- bind_rows(lbcc, slip_GASsQc)
View(lbcc_slip)
head(slip_GASsQc$age_at_scan)
head(slip_GASsQc$PCW_at_birth_recoded)
head(slip_GASsQc$adjusted_age_in_days)
2664+38*7
2930-280
2702-2664
5611-5571
qc_manual <- load_data(names = "qc", manual_qc_file) %>% bind_rows(.)
full_data <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_combined_011923.csv")
full_data$logAge <- log10(full_data$adjusted_age_in_days)
full_data <- full_data %>% mutate(sex = as.factor(sex), adjusted_age_in_days = age_at_scan + (gestational_age*7)) %>% rowwise() %>%
mutate(minQC = min(c_across(contains("qc"))))
levels(full_data$sex) <- c("F", "M") #male = 0, female = 1
sum(is.na(full_data$adjusted_age_in_days))
full_data$adjusted_age_in_days <- ifelse(!is.na(full_data$gestational_age), (full_data$age_at_scan + (full_data$gestational_age*7)), full_data$age_at_scan + 280)
qc_manual <- load_data(names = "qc", manual_qc_file) %>% bind_rows(.)
full_data <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_combined_011923.csv")
full_data$logAge <- log10(full_data$adjusted_age_in_days)
full_data <- full_data %>% mutate(sex = as.factor(sex)) %>% rowwise() %>%
mutate(minQC = min(c_across(contains("qc"))))
full_data$adjusted_age_in_days <- ifelse(!is.na(full_data$gestational_age), (full_data$age_at_scan + (full_data$gestational_age*7)), full_data$age_at_scan + 280)
levels(full_data$sex) <- c("F", "M") #male = 0, female = 1
```
full_data$adjusted_age_in_days <- ifelse(!is.na(full_data$gestational_age), (full_data$age_at_scan + (full_data$gestational_age*7)), full_data$age_at_scan + 280)
levels(full_data$sex) <- c("F", "M") #male = 0, female = 1
sum(is.na(full_data$adjusted_age_in_days))
full_data$scan_type <- ifelse(grepl("MPR", full_data$scan_id), "MPR", ifelse((!grepl("MPR", full_data$scan_id) & grepl("T1w", full_data$scan_id)), "T1w_other", ifelse(grepl("T2w", full_data$scan_id), "T2w", ifelse(grepl("FLAIR", full_data$scan_id), "flair", NA))))
full_data$ageBin <- cut(full_data$age_at_scan, breaks = c(-Inf, 30, 365, 1095, 2190, 4380, Inf), labels = c("Newborn", "Infant", "Toddler", "Preschool", "School_Age", "Adolescent"), include.lowest = TRUE)
#df_MPR <- full_data[grepl("MPR", full_data$scan_id),] %>% distinct(subject_id, .keep_all = T)#947
#df_T1w <- full_data[!grepl("MPR", full_data$scan_id) & grepl("T1w", full_data$scan_id),] %>% distinct(subject_id, .keep_all = T)#1743
#df_T2w <- full_data[grepl("T2w", full_data$scan_id),] %>% distinct(subject_id, .keep_all = T)#1021
#table(grepl("FLAIR",full_data$scan_id))#891
table(full_data$scan_type)
GA_data <- subset(filter(full_data, scan_type == "MPR"), !is.na(gestational_age)) %>% distinct(subject_id, .keep_all = T)#358
GA_data$log_GA <- log10(GA_data$gestational_age)
#Split in GA bins
# Determine the cut points based on quantiles
cut_points <- quantile(GA_data$gestational_age, probs = c(1/3, 2/3)) # cut points are 39 and 40. So this will NOT work.
cut_points <- quantile(GA_data$log_GA, probs = c(1/3, 2/3)) # cut points are 1.59 and 1.6. So this will NOT work.
# Create a new column indicating cut points: specifying by weeks.
GA_data$preterm <- cut(GA_data$gestational_age, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
table(GA_data$preterm)
table(GA_data$sex)
df_Ss <- GA_data %>% group_by(scan_type) %>% distinct(subject_id, .keep_all = T) %>% filter(scan_type == "MPR"& minQC >= 0.6)
df_mnSs <- merge(GA_data, qc_manual,by = c("subject_id", "session_id")) %>% group_by(scan_type) %>% distinct(subject_id, .keep_all = T) %>% filter(scan_type == "MPR" & rawdata_image_grade >= 1 & minQC >= 0.6)
table(df_Ss$preterm)
table(df_mnSs$preterm)
df_Ss <- GA_data %>% group_by(scan_type) %>% distinct(subject_id, .keep_all = T) %>% filter(scan_type == "MPR"& minQC >= 0.6)
df_mnSs <- merge(GA_data, qc_manual,by = c("subject_id", "session_id")) %>% group_by(scan_type) %>% distinct(subject_id, .keep_all = T) %>% filter(scan_type == "MPR" & rawdata_image_grade >= 1 & minQC >= 0.6)
table(df_Ss$preterm)
table(df_mnSs$preterm)
write.csv(dfSs, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC_0212.csv", quote = F, row.names = F)
write.csv(df_Ss, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC_0212.csv", quote = F, row.names = F)
write.csv(df_mnSs, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_mnSsQC_0212.csv", quote = F, row.names = F)
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
#fix some columns in lbcc
lbcc <- lbcc %>% rename(hippocampi_and_amygdalae = hippocampi_and_amygdale) %>% mutate(PC_days_at_scan = PCW_at_scan*7, PCW_at_birth_recoded = as.integer(PCW_at_birth_recoded))
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC_0212.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = Cortex + sGMV, total_GMWM = Cortex + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdalae = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = Cortex, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm, PC_days_at_scan = )
#bind dfs
lbcc_slip <- bind_rows(lbcc, slip_GASsQc)
head(slip_GASsQc$adjusted_age_in_days)
head(slip_GASsQc$age_at_scan)
head(slip_GASsQc$PCW_at_birth_recoded)
2664+38*7
table(lbcc_slip$study)
sum(is.na(lbcc_slip$PCW_at_birth)) #603
sum(is.na(lbcc_slip$PCW_at_birth_recoded))#338
range(na.omit(lbcc_slip$PCW_at_birth))#[2 50]
boxplot(lbcc_slip$PCW_at_birth)
boxplot(lbcc_slip$PCW_at_scan)
hist(lbcc_slip$PCW_at_scan)
#Preterm categories (broad)
# Create a new column indicating cut points: specifying by weeks.
lbcc_slip$preterm <- cut(lbcc_slip$PCW_at_birth, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
table(lbcc_slip$preterm)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip$study)
sum(is.na(lbcc_slip$PCW_at_birth)) #603
sum(is.na(lbcc_slip$PCW_at_birth_recoded))#338
range(na.omit(lbcc_slip$PCW_at_birth))#[2 50]
boxplot(lbcc_slip$PCW_at_birth)
boxplot(lbcc_slip$PCW_at_scan)
hist(lbcc_slip$PCW_at_scan)
#Preterm categories (broad)
# Create a new column indicating cut points: specifying by weeks.
lbcc_slip$preterm <- cut(lbcc_slip$PCW_at_birth, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
table(lbcc_slip$preterm)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins"])
table(lbcc$preterm)
table(lbcc[match(unique(lbcc_slip$participant), lbcc$participant),"GAbins"])
# Create a new column indicating cut points: specifying by weeks.
lbcc_slip$preterm <- cut(lbcc_slip$PCW_at_birth, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
lbcc_slip$GAbins_recode <- ifelse(lbcc_slip$GAbins == "fetal", "fetal", lbcc_slip$preterm)
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
levels(lbcc_slip$preterm)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
lbcc_slip$GAbins_recode <- ifelse(lbcc_slip$GAbins == "fetal", "fetal", lbcc_slip$preterm)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
table(lbcc_slip$GAbins_recode)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
table(lbcc_slip$GAbins_recode)
levels(lbcc_slip$GAbins)
levels(lbcc_slip$GAbins_recode)
table(lbcc_slip$GAbins_recode)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
For lbcc-slip combo
names(lbcc_slip)
sum(is.na(lbcc_slip$total_GM))
View(lbcc_slip)
sum(is.na(lbcc$total_GM))
write.csv(lbcc_slip, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/lbcc_slip_GA_combo.csv", quote = F, row.names = F)
#Get the correct df
df <- lbcc_slip <- lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),] %>% filter(GA_bins_recode != "fetal")
#Preterm categories (broad)
# Create a new column indicating cut points: specifying by weeks.
lbcc_slip$preterm <- cut(lbcc_slip$PCW_at_birth, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
lbcc_slip$GAbins_recode <- ifelse(lbcc_slip$GAbins == "fetal", "fetal", lbcc_slip$preterm)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
#Get the correct df
df <- lbcc_slip <- lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),] %>% filter(GAbins_recode != "fetal")
lbcc <- load_data(names = "lbcc", lbcc_ga_file) %>% bind_rows(.) %>%  select(-1, -2) #drop first two columns, repeat of row numbers
length(unique(lbcc$participant))#15779 unique participant IDs
#fix some columns in lbcc
lbcc <- lbcc %>% rename(hippocampi_and_amygdalae = hippocampi_and_amygdale) %>% mutate(PC_days_at_scan = PCW_at_scan*7, PCW_at_birth_recoded = as.integer(PCW_at_birth_recoded))
#fix column names to match lbcc dataframe
slip_GASsQc <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_GA_SsQC_0212.csv")
slip_GASsQc <- slip_GASsQc %>% mutate(total_GM = Cortex + sGMV, total_GMWM = Cortex + sGMV + WMV, cort_WM = right.cerebral.white.matter + left.cerebral.white.matter, thalamus = right.thalamus + left.thalamus, hippocampus = right.hippocampus+left.hippocampus, putamen = right.putamen + left.putamen, hippocampi_and_amygdalae = right.hippocampus + left.hippocampus + right.amygdala + left.amygdala) %>% rename(participant = subject_id, PCW_at_birth_recoded = gestational_age, study = study_id, CSF = csf, ventricles = Ventricles, total_WM = WMV, brainMaskVol = TCV, cort_GM = Cortex, subc_GM = sGMV, cerebellum = CerebellumVolume, GAbins = preterm, PC_days_at_scan = adjusted_age_in_days)
#bind dfs
lbcc_slip <- bind_rows(lbcc, slip_GASsQc)
write.csv(lbcc_slip, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/lbcc_slip_GA_combo.csv", quote = F, row.names = F)
sum(is.na(lbcc_slip$PC_days_at_scan))
# Create a new column indicating cut points: specifying by weeks.
lbcc_slip$preterm <- cut(lbcc_slip$PCW_at_birth, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
lbcc_slip$GAbins_recode <- ifelse(lbcc_slip$GAbins == "fetal", "fetal", lbcc_slip$preterm)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
head(lbcc_slip$GAbins_recode)
is.factor(lbcc_slip$GAbins_recode)
lbcc_slip$GAbins_recode <- as.factor(lbcc_slip$preterm) %>% ifelse(lbcc_slip$GAbins == "fetal", "fetal", lbcc_slip$preterm)
levels(lbcc_slip$GAbins_recode) <- c("VPM", "LPM", "Term", "Fetal")
lbcc_slip$GAbins_recode <- as.factor(lbcc_slip$preterm) %>% ifelse(lbcc_slip$GAbins == "fetal", "fetal")
lbcc_slip$GAbins_recode <- as.factor(lbcc_slip$preterm)
lbcc_slip$GAbins_recode[lbcc_slip$GAbins == "fetal"] <- "fetal"
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
lbcc_slip$preterm <- cut(lbcc_slip$PCW_at_birth, breaks = c(-Inf, 31.9, 36.9, Inf), labels = c("VPM", "LPM", "Term"), include.lowest = TRUE)
lbcc_slip$GAbins_recode <- lbcc_slip$preterm
lbcc_slip$GAbins_recode[lbcc_slip$GAbins == "fetal"] <- "fetal"
lbcc_slip$GAbins_recode <- as.factor(lbcc_slip$GAbins_recode)
table(lbcc_slip$GAbins_recode)
is.factor(lbcc_slip$preterm)
lbcc_slip$GAbins_recode <- as.character(lbcc_slip$preterm)
lbcc_slip$GAbins_recode[lbcc_slip$GAbins == "fetal"] <- "fetal"
lbcc_slip$GAbins_recode <- as.factor(lbcc_slip$GAbins_recode)
table(lbcc_slip$GAbins_recode)
levels(lbcc_slip$GAbins_recode)
table(lbcc_slip$GAbins_recode)
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"preterm"])
table(lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),"GAbins_recode"])
```
#Get LogAge
lbcc_slip$logAgePCDays <- log10(lbcc_slip$PC_days_at_scan)
sum(is.na(lbcc_slip$logAgePCDays))
# Build the growth chart model
p <- "total_GM" # specify the phenotype
#Get the correct df
df <- lbcc_slip <- lbcc_slip[match(unique(lbcc_slip$participant), lbcc_slip$participant),] %>% filter(GAbins_recode != "fetal") %>% select("logAgePCDays", "sex", "total_GM", "GAbins_recode")
#Sort the df
df <- df[order(df$logAgePCDays),] %>% na.omit()
# No SurfaceHoles in the SynthSeg (SS) model
#The df should have no NAs. So create df for the specific variables needed. Or remove all the variables with NAs.
formulaSs <- as.formula(paste0(p, "~fp(logAge, npoly=3) + sex + GAbins_recode - 1"))
growthChartModelSs <-gamlss(formula = formulaSs,
sigma.formula = formulaSs,
nu.formula = as.formula(paste0(p, "~1")),
family = GG,
data = df,
control = gamlss.control(n.cyc = 200),  # See (2)
trace = F)
growthChartModelSs <-gamlss(formula = formulaSs,
sigma.formula = formulaSs,
nu.formula = as.formula(paste0(p, "~1")),
family = GG,
data = df,
control = gamlss.control(n.cyc = 200),  # See (2)
trace = F)
# No SurfaceHoles in the SynthSeg (SS) model
#The df should have no NAs. So create df for the specific variables needed. Or remove all the variables with NAs.
formulaSs <- as.formula(paste0(p, "~fp(logAgePCDays, npoly=3) + sex + GAbins_recode - 1"))
growthChartModelSs <-gamlss(formula = formulaSs,
sigma.formula = formulaSs,
nu.formula = as.formula(paste0(p, "~1")),
family = GG,
data = df,
control = gamlss.control(n.cyc = 200),  # See (2)
trace = F
)
source("~/Documents/Grad_School/BGDLab/GestationalAge/R/scripts/lib_mpr_analysis_EK.r")
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange(growthChartModelSs, dfSsterm$logAge)
traceback()
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
traceback()
for (i in c(1:length(desiredCentiles))){
centileCurvesSs[[i]] <- predictCentilesForAgeRange(growthChartModelSs, dfSsterm$logAge,
cent=desiredCentiles[[i]])}
for (i in c(1:length(desiredCentiles))){
centileCurvesSs[[i]] <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays,
cent=desiredCentiles[[i]])}
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(magrittr)
library(table1)
library(ggplot2)
library(rlang)
library(viridis)
library(gamlss) #to fit model
library(mgcv) # helps with the gam models
library(tidymv) # helps with the gam models
#setwd("/Users/ekafadar/Documents/Grad_School/BGDLab/GestationalAge/")
source("/Users/ekafadar/Documents/Grad_School/BGDLab/GestationalAge/R/scripts/data_functions.R")
source("~/Documents/Grad_School/BGDLab/GestationalAge/R/scripts/lib_mpr_analysis_EK.r")
source("~/Documents/Grad_School/BGDLab/GestationalAge/R/scripts/figures.r")
folders <- c("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/2024-01-19_release/slip_2022/","/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/2024-01-19_release/slip_2023_02/", "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/2024-01-19_release/slip_2023_03/")
manual_qc_file <- "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/manual_qc_grades_radiology_paper.csv"
lbcc_ga_file <- "~/Documents/Grad_School/BGDLab/LBCC_data/GA.all.data-24-02.csv"
participants <- load_data(names = c(paste0("data",1:3)), paste0(folders,"participants.tsv")) %>% bind_rows(.)
qc_scores <- load_data(names = c(paste0("data",1:3)), paste0(folders,"synthseg+_qc_scores.csv")) %>% bind_rows(.)
volumes <- load_data(names = c(paste0("data",1:3)), paste0(folders,"synthseg+_volumes.csv")) %>% bind_rows(.)
colnames(qc_scores) <- c(paste0(names(qc_scores[1:8])),paste0(names(qc_scores[9:length(names(qc_scores))]),"_qc"))
qc_manual <- load_data(names = "qc", manual_qc_file) %>% bind_rows(.)
#merge
full_data <- merge(qc_scores, volumes, by = intersect(names(qc_scores), names(volumes)))
full_data <- merge(full_data, participants, by = intersect(names(full_data), names(participants)))
write.csv(full_data, file = "/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_combined_011923.csv", quote = F, row.names = F)
qc_manual <- load_data(names = "qc", manual_qc_file) %>% bind_rows(.)
full_data <- read.csv("/Users/ekafadar/Documents/Grad_School/BGDLab/SLIP_data/SLIP_combined_011923.csv")
full_data$logAge <- log10(full_data$adjusted_age_in_days)
full_data <- full_data %>% mutate(sex = as.factor(sex)) %>% rowwise() %>%
mutate(minQC = min(c_across(contains("qc"))))
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
# Predict the median centile of each model
medianCentileSs <- debug(predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays))
debug(predictCentilesForAgeRange_GAbins)
# Predict the median centile of each model
medianCentileSs <- predictCentilesForAgeRange_GAbins(growthChartModelSs, df$logAgePCDays)
View(newDataF_LPM)
force(gamModel)
